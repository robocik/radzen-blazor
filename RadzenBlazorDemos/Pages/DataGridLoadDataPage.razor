@page "/datagrid-loaddata"
@using System.Linq.Dynamic.Core
@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind

@inject NorthwindContext dbContext

<h1>DataGrid <strong>LoadData</strong></h1>

<p>The <code>LoadData</code> event allows you to perform custom paging, sorting and filtering.</p>

<RadzenExample Name="DataGrid" Source="DataGridLoadData" Heading="false">
    <RadzenButton Text="Reset" Click="@Reset" Style="margin-bottom: 20px;" />
    <RadzenDataGrid style="height: 335px" @ref="grid" IsLoading=@isLoading Count="@count" Data="@employees" LoadData="@LoadData" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="4" PagerHorizontalAlign="HorizontalAlign.Center" TItem="Employee" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="Employee" Property="EmployeeID" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Employee" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="60px" >
                <Template Context="data">
                    <RadzenImage Path="@data.Photo" style="width: 40px; height: 40px; border-radius: 8px;" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="FirstName" Title="First Name" Frozen="true" Width="140px"/>
            <RadzenDataGridColumn TItem="Employee" Property="LastName" Title="Last Name" Width="140px"/>
            <RadzenDataGridColumn TItem="Employee" Property="Title" Title="Job Title" 
                Type="typeof(IEnumerable<string>)" FilterValue="@selectedTitles" FilterOperator="FilterOperator.Contains" Width="200px">
                <FilterTemplate>
                    <RadzenDropDown @bind-Value=@selectedTitles Style="width:100%"
                        Change=@OnSelectedTitlesChange Data="@(titles)" AllowClear="true" Multiple="true" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="TitleOfCourtesy" Title="Title" Width="100px" />
            <RadzenDataGridColumn TItem="Employee" Property="BirthDate" Title="Birth Date" FormatString="{0:d}" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="HireDate" Title="Hire Date" FormatString="{0:d}" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="Address" Title="Address" Width="200px" />
            <RadzenDataGridColumn TItem="Employee" Property="City" Title="City" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="Region" Title="Region" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="PostalCode" Title="Postal Code" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="Country" Title="Country" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="HomePhone" Title="Home Phone" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="Extension" Title="Extension" Width="140px" />
            <RadzenDataGridColumn TItem="Employee" Property="Notes" Title="Notes" Width="300px" />
        </Columns>
    </RadzenDataGrid>
</RadzenExample>

<RadzenCard class="mt-4">
    <h3>To perform custom data-binding:</h3>
    <ol>
        <li>Set the Data and Count properties.
        <pre class="mt-3 p-3">
            <code>&lt;RadzenDataGrid Count="@@count" Data="@@employees"</code>
        </pre>
        </li>
        <li>
            Handle the LoadData event and update the Data and Count backing fields (<code>employees</code> and <code>count</code> in this case).
        <pre class="mt-3 p-3">
            <code>
void LoadData(LoadDataArgs args)
{
    var query = dbContext.Employees.AsQueryable();

    if (!string.IsNullOrEmpty(args.Filter))
    {
        query = query.Where(args.Filter);
    }

    if (!string.IsNullOrEmpty(args.OrderBy))
    {
        query = query.OrderBy(args.OrderBy);
    }

    count = query.Count();

    employees = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();


} 
            </code>
        </pre>
        </li>
    </ol>
</RadzenCard>
@code {
    RadzenDataGrid<Employee> grid;
    int count;
    IEnumerable<Employee> employees;
    bool isLoading = false;

    List<string> titles = new List<string> {"Sales Representative", "Vice President, Sales", "Sales Manager", "Inside Sales Coordinator" };
    IEnumerable<string> selectedTitles;

    void OnSelectedTitlesChange(object value)
    {
        if (selectedTitles != null && !selectedTitles.Any())
        {
            selectedTitles = null;  
        }
    }

    async Task Reset()
    {
        grid.Reset(true); 
        await grid.FirstPage(true);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        // This demo is using https://dynamic-linq.net
        var query = dbContext.Employees.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();

        // Perform paginv via Skip and Take.
        employees = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }
}
