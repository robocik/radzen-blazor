@page "/listbox"

@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inject NorthwindContext dbContext

<RadzenExample Name="ListBox">
    <div class="row px-3">
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>ListBox</h4>
                <RadzenListBox @bind-Value=@value Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "ListBox")) Style="height:200px" Class="w-100" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>ListBox with template</h4>
                <RadzenListBox @bind-Value=@value Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID"
                               Change=@(args => OnChange(args, "ListBox with template")) Style="height:200px" Class="w-100">
                    <Template>
                        Company: @((context as Customer).CompanyName)
                    </Template>
                </RadzenListBox>
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>Multiple selection</h4>
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@multipleValues Multiple="true" Data=@customers
                               TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "ListBox with multiple selection")) Style="height:200px" Class="w-100" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>Filtering</h4>
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@value Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID"
                               Change=@(args => OnChange(args, "ListBox with filtering")) Style="height:200px" Class="w-100" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>Custom filter operator</h4>
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" @bind-Value=@value
                               Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "ListBox with custom filter operator")) Style="height:200px" Class="w-100" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>Custom filtering</h4>
                <RadzenListBox AllowFiltering="true" LoadData=@OnLoadData @bind-Value=@value Data=@customCustomersData TextProperty="CompanyName" ValueProperty="CustomerID"
                               Change=@(args => OnChange(args, "ListBox with custom filtering")) Style="height:200px" Class="w-100" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>Virtualization using IQueryable</h4>
                <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" @bind-Value=@value
                               Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "ListBox with custom filter operator")) Style="height:200px" Class="w-100" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <RadzenCard>
                <h4>Virtualization using LoadData event</h4>
                <RadzenListBox AllowVirtualization="true" AllowFiltering="true" Count="@count" LoadData=@LoadDataVirtualization @bind-Value=@value Data=@customCustomersDataVirtualization TextProperty="CompanyName" ValueProperty="CustomerID"
                               Change=@(args => OnChange(args, "ListBox with custom filtering")) Style="height:200px" Class="w-100" />
            </RadzenCard>
        </div>
    </div>
</RadzenExample>

<EventConsole @ref=@console Class="mt-4" />

@code {
    IEnumerable<Customer> customers;
    IEnumerable<Customer> customCustomersData;

    protected override void OnInitialized()
    {
        customers = dbContext.Customers.ToList();
    }

    IEnumerable<string> multipleValues = new string[] { "ALFKI", "ANATR" };
    string value = "ALFKI";

    EventConsole console;

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        console.Log($"{name} value changed to {str}");
    }

    void OnLoadData(LoadDataArgs args)
    {
        var query = dbContext.Customers.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.CustomerID.Contains(args.Filter) || c.ContactName.Contains(args.Filter));
        }

        console.Log($"LoadData with filter: {args.Filter}");

        customCustomersData = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    IEnumerable<Customer> customCustomersDataVirtualization;
    int count;
    void LoadDataVirtualization(LoadDataArgs args)
    {
        var query = dbContext.Customers.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.CustomerID.ToLower().Contains(args.Filter.ToLower()) || c.ContactName.ToLower().Contains(args.Filter.ToLower()));
        }

        console.Log($"LoadData with virtualization: Skip:{args.Skip}, Top:{args.Top}, Filter:{args.Filter}");

        count = query.Count();

        customCustomersDataVirtualization = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        InvokeAsync(StateHasChanged);
    }
}