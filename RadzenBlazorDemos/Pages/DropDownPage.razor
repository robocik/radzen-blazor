@page "/dropdown"

@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind

@inject NorthwindContext dbContext
<style>
</style>

<RadzenExample Name="DropDown">
<div class="row px-3">
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Binding to simple collection</h4>
            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" 
                            Data=@(customers.Select(c => c.CompanyName).Distinct())
                            Change=@(args => OnChange(args, "DropDown")) />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Disabled DropDown</h4>
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled=@disabled AllowClear="true" TValue="string" Class="w-100" 
                                Data=@(customers.Select(c => new { CustomerID = c.CustomerID, CompanyName = c.CompanyName }).Distinct())
                                TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown")) />
                <RadzenSwitch style="margin-left: 1rem" @bind-Value=@disabled />
            </div>
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Virtualization using IQueryable</h4>
            <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100" 
                            AllowFiltering="true" Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID"
                            Change=@(args => OnChange(args, "DropDown with virtualization")) />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Virtualization using LoadData event</h4>
            <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100" 
                            LoadData=@LoadDataVirtualization AllowFiltering="true" Count="@count"
                            Data=@customCustomersDataVirtualization TextProperty="CompanyName" ValueProperty="CustomerID"
                            Change=@(args => OnChange(args, "DropDown with virtualization")) />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Custom filter operator</h4>
            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" 
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown with custom filter operator")) />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Custom filtering</h4>
            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" 
                            LoadData=@LoadData AllowFiltering="true"
                            Data=@customCustomersData TextProperty="CompanyName" ValueProperty="CustomerID"
                            Change=@(args => OnChange(args, "DropDown with custom filtering")) />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">DropDown with placeholder</h4>
            <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Class="w-100" 
                            Placeholder="Select..." Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown with placeholder")) />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">DropDown with template</h4>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@value Placeholder="Select..."
                            Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "DropDown with placeholder")) Class="w-100" >
                <Template>
                    Company: @((context as Customer).CompanyName)
                </Template>
            </RadzenDropDown>
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Multiple selection</h4>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@multipleValues Multiple="true" Placeholder="Select..." Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID"
                            Change=@(args => OnChange(args, "DropDown with multiple selection")) Class="w-100" />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Bind Value to model property</h4>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@products @bind-Value=@myModel.MyValue
                            TextProperty="ProductName" ValueProperty="ProductID" Change=@(args => ChangeBound(args, "DropDown with bound Value")) Class="w-100" />
        </RadzenCard>
    </div>
</div>
</RadzenExample>

<EventConsole @ref=@console Class="mt-4" />

@code {
    bool disabled = true;
    IEnumerable<Customer> customers;
    IEnumerable<Customer> customCustomersData;
    IEnumerable<Product> products;
    MyObject myModel = new MyObject();

    int count;
    IEnumerable<Customer> customCustomersDataVirtualization;

    IEnumerable<string> multipleValues = new string[] { "ALFKI", "ANATR" };
    string value = "ALFKI";

    EventConsole console;

    protected override void OnInitialized()
    {
        customers = dbContext.Customers.ToList();
        products = dbContext.Products.ToList();
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        console.Log($"{name} value changed to {str}");
    }

    void ChangeBound(object value, string name)
    {
        console.Log($"{name} value changed to {myModel.MyValue}");
    }

    class MyObject
    {
        public int? MyValue { get; set; } = 3;
    }

    void LoadData(LoadDataArgs args)
    {
        var query = dbContext.Customers.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.CustomerID.ToLower().Contains(args.Filter.ToLower()) || c.ContactName.ToLower().Contains(args.Filter.ToLower()));
        }

        console.Log($"LoadData with filter: {args.Filter}");

        customCustomersData = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    void LoadDataVirtualization(LoadDataArgs args)
    {
        var query = dbContext.Customers.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.CustomerID.ToLower().Contains(args.Filter.ToLower()) || c.ContactName.ToLower().Contains(args.Filter.ToLower()));
        }

        console.Log($"LoadData with virtualization: Skip:{args.Skip}, Top:{args.Top}, Filter:{args.Filter}");

        count = query.Count();

        customCustomersDataVirtualization = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        InvokeAsync(StateHasChanged);
    }
}
