@using Radzen
@using System.Collections
@using System.Collections.Generic
@using System.Linq.Dynamic.Core
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@typeparam TValue
@inherits DropDownBase<TValue>

@if (Visible)
{
    <div @ref="@Element" @attributes="Attributes" class="@GetCssClass()"
         style="@Style" tabindex="@TabIndex" id="@GetId()">
        <div class="rz-helper-hidden-accessible">
            <input disabled="@Disabled" style="width:100%" aria-haspopup="listbox" readonly="" type="text"
                   name="@Name" aria-label="@(!Multiple && Value != null ? PropertyAccess.GetItemOrValueFromProperty(Value, TextProperty) : "")" />

        </div>

        @if (Template != null && selectedItem != null)
        {
            <label class="rz-dropdown-label rz-inputtext " onclick="@OpenPopupScript()" style="width:100%;">
                @Template(selectedItem)
            </label>
        }
        else if (selectedItem != null)
        {
            <label class="rz-dropdown-label rz-inputtext " onclick="@OpenPopupScript()" style="width:100%;">
                @PropertyAccess.GetItemOrValueFromProperty(selectedItem, TextProperty)
            </label>
        }
        else if (selectedItems.Count > 0)
        {
            <label class="rz-dropdown-label rz-inputtext " onclick="@OpenPopupScript()" style="width:100%;">
                @if (selectedItems.Count < MaxSelectedLabels)
                {
                    @if (Template == null)
                    {
                        @(string.Join(",", selectedItems.Select(i => PropertyAccess.GetItemOrValueFromProperty(i, TextProperty))))
                    }
                    else
                    {
                        foreach (var item in selectedItems)
                        {
                            @Template(item)@(",")
                        }
                    }
                }
                else
                {
                    @($"{selectedItems.Count} {SelectedItemsText}")
                }
            </label>
        }
        else if (SelectedValue != null)
        {
            <label class="rz-dropdown-label rz-inputtext rz-corner-all" onclick="@OpenPopupScript()" style="width:100%;">
                @PropertyAccess.GetItemOrValueFromProperty(SelectedValue, TextProperty)
            </label>
        }
        else if (!string.IsNullOrEmpty(Placeholder))
        {
            <label class="rz-dropdown-label rz-inputtext  rz-placeholder" onclick="@OpenPopupScript()" style="width:100%;">
                @Placeholder
            </label>
        }
        else
        {
            <label class="rz-dropdown-label rz-inputtext " onclick="@OpenPopupScript()" style="width:100%">
                &nbsp;
            </label>
        }

        <div class="rz-dropdown-trigger  rz-corner-right" onclick="@OpenPopupScript()">
            <span class="rz-dropdown-trigger-icon  rzi rzi-chevron-down"></span>
        </div>
        <div id="@PopupID" class="@(Multiple ? "rz-multiselect-panel" : "rz-dropdown-panel")"
             style="display:none;min-width:320px;padding:0px;">
            <div class="rz-lookup-panel">
                @if (AllowFiltering)
                {
                    <div class="rz-lookup-search">
                        <input id="@SearchID" @ref="@search" tabindex="-1" placeholder="@SearchText"
                               @onchange="@((args) => OnFilter(args))" @onkeydown="@((args) => OnFilterKeyPress(args))" value="@searchText" style="@(ShowSearch ? "" : "margin-right:0px;")" />
                        @if (ShowSearch)
                        {
                            <button class="rz-button rz-button-md    btn-primary rz-button-icon-only" type="button" title="">
                                <i class="rz-button-icon-left rzi">search</i>
                            </button>
                        }
                    </div>
                }
                @if (Template != null)
                {
                    <RadzenDataGrid ColumnWidth="@ColumnWidth" @ref="grid" Data="@(LoadData.HasDelegate ? (Data != null ? Data.Cast<object>() : Enumerable.Empty<object>()) : pagedData)" Count="@(LoadData.HasDelegate ? Count : count)" LoadData="@OnLoadData"
                                    TItem="object" ShowPagingSummary="@ShowPagingSummary" PagingSummaryFormat="@PagingSummaryFormat" PageSize="@PageSize" PageNumbersCount="@PageNumbersCount" AllowPaging="@(!IsVirtualizationAllowed())" AllowSorting="@AllowSorting" RowSelect="@OnRowSelect" Style="@(IsVirtualizationAllowed() ? "height:285px" : "")">
                        <Columns>
                            <RadzenDataGridColumn TItem="object" Property="@TextProperty" Title="@TextProperty" Type="typeof(string)">
                                <Template>
                                    @Template(context)
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }
                else
                {
                    if (!string.IsNullOrEmpty(TextProperty) || Columns != null)
                    {
                        <RadzenDataGrid ColumnWidth="@ColumnWidth" EmptyText="@EmptyText" @ref="grid" Data="@(LoadData.HasDelegate ? (Data != null ? Data.Cast<object>() : Enumerable.Empty<object>()) : pagedData)" Count="@(LoadData.HasDelegate ? Count : count)" LoadData="@OnLoadData"
                                        TItem="object" ShowPagingSummary="@ShowPagingSummary" PagingSummaryFormat="@PagingSummaryFormat" PageSize="@PageSize" PageNumbersCount="@PageNumbersCount" AllowPaging="@(!IsVirtualizationAllowed())" AllowSorting="@AllowSorting" RowSelect="@OnRowSelect" Style="@(IsVirtualizationAllowed() ? "height:285px" : "")">
                            <Columns>
                                @if (Columns != null)
                                {
                                    @Columns
                                }
                                else
                                {
                                    <RadzenDataGridColumn TItem="object" Property="@TextProperty" Title="@TextProperty" Type="typeof(string)" />
                                }
                            </Columns>
                        </RadzenDataGrid>
                    }
                    else
                    {
                        <RadzenDataGrid ColumnWidth="@ColumnWidth" EmptyText="@EmptyText" @ref="grid" Data="@(LoadData.HasDelegate ? (Data != null ? Data.Cast<object>() : Enumerable.Empty<object>()) : pagedData)" Count="@(LoadData.HasDelegate ? Count : count)" LoadData="@OnLoadData"
                                        TItem="object" ShowPagingSummary="@ShowPagingSummary" PagingSummaryFormat="@PagingSummaryFormat" PageSize="@PageSize" PageNumbersCount="@PageNumbersCount" AllowPaging="@(!IsVirtualizationAllowed())" AllowSorting="@AllowSorting" RowSelect="@OnRowSelect" Style="@(IsVirtualizationAllowed() ? "height:285px" : "")">
                            <Columns>
                                <RadzenDataGridColumn TItem="object" Property="it" Title="Item" Type="typeof(string)">
                                    <Template>
                                        @context
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    }
                }
            </div>
        </div>
        @if (AllowClear && (!Multiple && HasValue || Multiple && selectedItems.Count > 0))
        {
            <i class="rz-dropdown-clear-icon rzi rzi-times" @onclick="@Clear"></i>
        }
    </div>
}
