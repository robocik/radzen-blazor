@using Microsoft.JSInterop
@using System.Reflection;
@inject IJSRuntime JSRuntime
@implements IDisposable
<div class="rz-dialog-wrapper">
    <div class="modal fade show d-block" id="exampleModal" role="dialog" aria-labelledby="rz-dialog-0-label">
        <div class="modal-dialog modal-dialog-scrollable" role="document" id="wide" style=@Style>
            <div class="modal-content">
        @if (Dialog.Options.ShowTitle)
        {
            @if (Dialog.Options.Draggable)
            {
                <Draggable Drag="@OnDrag" DragStart="@OnDragStart">
                    <div class="modal-header">
                        <span class="rz-dialog-title" id="rz-dialog-0-label">@((MarkupString)Dialog.Title)</span>
                        @if (Dialog.Options.ShowClose)
                        {
                            <a href="javascript:void(0)" @onclick="@Close" role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close ">
                                <span class="rzi rzi-times"></span>
                            </a>
                        }
                    </div>
                </Draggable>
            }
            else
            {
                <div class="modal-header">
                    <span class="rz-dialog-title" id="rz-dialog-0-label">@((MarkupString)Dialog.Title)</span>
                    @if (Dialog.Options.ShowClose)
                    {
                        <a href="javascript:void(0)" @onclick="@Close" role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close ">
                            <span class="rzi rzi-times"></span>
                        </a>
                    }
                </div>
            }
                    

        }
        <div class="rz-dialog-content">
            @if (Dialog.Options.ChildContent != null)
            {
                @Dialog.Options.ChildContent(Service)
            }
            else
            {
                @ChildContent
            }
        </div>
    </div>
        </div>
    </div>
        <div class="rz-dialog-mask" style="z-index: 1000;"></div>
</div>

@code {
    ElementReference dialog;

    string left;
    string top;
    string height;
    string width;

    double clientX;
    double clientY;

    async Task OnDragStart(DraggableEventArgs args)
    {
        clientX = args.ClientX;
        clientY = args.ClientY;

        shouldRender = false;
        var rect = await JSRuntime.InvokeAsync<Rect>("Radzen.clientRect", dialog);
        height = $"height: {rect.Height}px;";
        width = $"width: {rect.Width}px;";

        shouldRender = true;
    }

    void OnDrag(DraggableEventArgs args)
    {
        left = $"left: {args.Rect.Left + (args.ClientX - clientX)}px;";
        top = $"top: {args.Rect.Top + (args.ClientY - clientY)}px;";
    }

    bool shouldRender = true;
    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    [Parameter]
    public Dialog Dialog { get; set; }

    RenderFragment ChildContent => new RenderFragment(builder =>
        {
            builder.OpenComponent(0, Dialog.Type);

            if (Dialog.Parameters != null)
            {
                foreach (var parameter in Dialog.Parameters)
                {
                    builder.AddAttribute(1, parameter.Key, parameter.Value);
                }
            }

            builder.AddComponentReferenceCapture(2, component => reference = component);

            builder.CloseComponent();
        });

    object reference;

    void Close()
    {
        Service.Close();
    }

    string Style
    {
        get
        {
            var baseStyle = "";
            //var widthStyle = string.IsNullOrEmpty(dialog.Options.Width) ? "" : $"width: {dialog.Options.Width};";
            var heightStyle = string.IsNullOrEmpty(Dialog.Options.Height) ? "" : $"height: {Dialog.Options.Height};";
            var topStyle = string.IsNullOrEmpty(Dialog.Options.Top) ? "" : $"top: {Dialog.Options.Top};";
            var leftStyle = string.IsNullOrEmpty(Dialog.Options.Left) ? "" : $"left: {Dialog.Options.Left};";

            return $"{baseStyle}{heightStyle}{topStyle}{leftStyle}{Dialog.Options.Style}";
        }
    }

    [Inject] 
    DialogService Service { get; set; }

    protected override void OnInitialized()
    {
        Service.OnRefresh += OnRefresh;
    }

    void OnRefresh()
    {
        var stateHasChanged = reference?.GetType().GetMethod("StateHasChanged", BindingFlags.NonPublic | BindingFlags.Instance);

        InvokeAsync(() => stateHasChanged?.Invoke(reference, null)).ConfigureAwait(false);
    }

    public void Dispose()
    {
        Service.OnRefresh -= OnRefresh;
    }
}