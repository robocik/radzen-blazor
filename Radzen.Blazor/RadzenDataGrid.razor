@using System.Linq.Dynamic.Core
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@typeparam TItem
@inherits PagedDataBoundComponent<TItem>

@if (Columns != null)
{
    <CascadingValue Value=this>
        @Columns
    </CascadingValue>
}

@if (Visible)
{
    var visibleColumns = columns.Where(c => c.Visible).ToList();

    <div @ref=@Element style="@Style" @attributes="Attributes" class="rz-data-grid @GetCssClass()" id="@GetId()">
        @if(AllowGrouping)
        {
            <div class="rz-group-header" @onmouseup=@(args => EndColumnDropToGroup())>
            @if(groups.Any())
            {
                @foreach(var gd in groups)
                {
                    <div class="rz-group-header-item">
                        <span class="rz-group-header-item-title">@gd.GetTitle()</span>
                        <a href="javascript:void(0)" @onclick=@(args => { groups.Remove(gd); _groupedPagedView = null; }) role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close">
                            <span class="rzi rzi-times"></span>
                        </a>
                    </div>
                }
            }
            else
            {
                <div class="rz-group-header-drop">@GroupPanelText</div>
            }
            </div>
        }


        @if (AllowPaging && (PagerPosition == PagerPosition.Top || PagerPosition == PagerPosition.TopAndBottom))
        {
            <RadzenPager @ref="topPager" Count="@Count" PageSize="@PageSize" PageNumbersCount="@PageNumbersCount" PageChanged="@OnPageChanged" PageSizeChanged="@OnPageSizeChanged" PageSizeOptions="@PageSizeOptions" ShowPagingSummary="@ShowPagingSummary" PagingSummaryFormat="@PagingSummaryFormat" />
        }

    <div class="rz-data-grid-data">
        <table class="rz-grid-table rz-grid-table-fixed">
            <colgroup>
                @foreach(var g in groups)
                {
                    <col>
                }
                @if (Template != null && ShowExpandColumn)
                {
                    <col>
                }
                @foreach (var column in visibleColumns)
                {
                    <col id=@(getColumnResizerId(visibleColumns.IndexOf(column)) + "-col") style="@column.GetStyle()">
                }
            </colgroup>
            <thead>
                <tr>
                    @foreach(var g in groups)
                    {
                        <th class="rz-col-icon rz-unselectable-text" scope="col">
                            <span class="rz-column-title"></span>
                        </th>
                    }
                    @if (Template != null && ShowExpandColumn)
                    {
                        <th class="rz-col-icon rz-unselectable-text" scope="col">
                            <span class="rz-column-title"></span>
                        </th>
                    }
                    @for (var j = 0; j < visibleColumns.Count; j++)
                    {
                        var column = visibleColumns[j];
                        var cellAttr = HeaderCellAttributes(column);

                        object colspan;
                        cellAttr.TryGetValue("colspan", out colspan);

                        if (colspan != null)
                        {
                            j = j + (int)Convert.ChangeType(colspan, TypeCode.Int32) - 1;
                        }

                        var columnIndex = visibleColumns.IndexOf(column);
                        var sortableClass = AllowSorting && column.Sortable ? "rz-sortable-column" : "";
                        <th class="@($"rz-unselectable-text {sortableClass} {column.HeaderCssClass} {getFrozenColumnClass(column, visibleColumns)}")" scope="col" style="@column.GetStyle(true, true)" @onmouseup=@(args => EndColumnReorder(args, columnIndex)) @attributes="@(cellAttr)">
                            <div @onclick='@((args) => OnSort(args, column))' style="width:100%">

                                @if (AllowColumnReorder && column.Reorderable || AllowGrouping && column.Groupable)
                                {
                                    <span id="@getColumnResizerId(columnIndex)" class="rz-column-drag" 
                                         @onclick:preventDefault="true" @onclick:stopPropagation="true"
                                         @onmousedown=@(args => StartColumnReorder(args, columnIndex))>&nbsp;</span>
                                }
                                <span class="rz-column-title">
                                    @if (column.HeaderTemplate != null)
                                    {
                                        @column.HeaderTemplate
                                    }
                                    else
                                    {
                                        @column.Title
                                    }
                                </span>
                                @if (AllowSorting && column.Sortable)
                                {
                                    @if (column.GetSortOrder() == SortOrder.Ascending)
                                    {
                                        <span class="rz-sortable-column-icon rzi-grid-sort rzi-sort rzi-sort-asc"></span>
                                    }
                                    else if (column.GetSortOrder() == SortOrder.Descending)
                                    {
                                        <span class="rz-sortable-column-icon rzi-grid-sort rzi-sort rzi-sort-desc"></span>
                                    }
                                    else
                                    {
                                        <span class="rz-sortable-column-icon rzi-grid-sort rzi-sort"></span>
                                    }
                                }
                                @if (AllowColumnResize && column.Resizable)
                                {
                                    <div id="@getColumnResizerId(columnIndex)" style="cursor:col-resize;float:right;"
                                         @onclick:preventDefault="true" @onclick:stopPropagation="true" class="rz-column-resizer" 
                                         @onmousedown=@(args => StartColumnResize(args, columnIndex))>&nbsp;</div>
                                }
                                @if (AllowFiltering && column.Filterable && FilterMode == FilterMode.Advanced)
                                {
                                    <i @onclick:stopPropagation="true" onclick="@($"Radzen.togglePopup(this, '{PopupID}{column.GetFilterProperty()}')")"
                                       class="@getFilterIconCss(column)" />

                                            <div id="@($"{PopupID}{column.GetFilterProperty()}")" class="rz-overlaypanel"
                                         style="display:none;min-width:250px;" tabindex="0">
                                                <div class="rz-grid-filter rz-overlaypanel-content">
                                                    @if (column.FilterTemplate != null)
                                                    {
                                                        @column.FilterTemplate(column)
                                                    }
                                                    else
                                                    {
                                                        <RadzenLabel Text="@FilterText" class="rz-grid-filter-label" />
                                                        <RadzenDropDown @onclick:preventDefault="true" Data="@(column.GetFilterOperators().Select(t => new { Value = column.GetFilterOperatorText(t), Key = t }))" TextProperty="Value" ValueProperty="Key" TValue="FilterOperator" Value="@column.GetFilterOperator()" Change="@(args => column.SetFilterOperator((FilterOperator)args))" />
                                                        @if (PropertyAccess.IsNumeric(column.FilterPropertyType))
                                                        {
                                                            @(DrawNumericFilter(column, false))
                                                        }
                                                        else if (PropertyAccess.IsDate(column.FilterPropertyType))
                                                        {
                                                            <RadzenDatePicker TValue="@object" ShowTime="true" ShowTimeOkButton="true" DateFormat="@getFilterDateFormat(column)"
                                                                      Value="@column.GetFilterValue()" Change="@(args => column.SetFilterValue(args.Value))" />

                                                        }
                                                        else if (column.FilterPropertyType == typeof(bool) || column.FilterPropertyType == typeof(bool?))
                                                        {
                                                            <RadzenCheckBox TriState="true" TValue="@object" Value="@column.GetFilterValue()" Change="@(args => column.SetFilterValue(args))" />
                                                        }
                                                        else
                                                        {
                                                            <RadzenTextBox Value="@($"{column.GetFilterValue()}")" Change="@(args => column.SetFilterValue(args))" />
                                                        }

                                                        <RadzenDropDown @onclick:preventDefault="true" TextProperty="Text" ValueProperty="Value" Style="width: 80px"
                                                                Data="@(Enum.GetValues(typeof(LogicalFilterOperator)).Cast<LogicalFilterOperator>().Select(t => new { Text = t == LogicalFilterOperator.And ? AndOperatorText : OrOperatorText, Value = t }))" TValue="LogicalFilterOperator" Value="@column.LogicalFilterOperator" Change="@(args => column.SetLogicalFilterOperator((LogicalFilterOperator)args))" />

                                                        <RadzenDropDown @onclick:preventDefault="true" Data="@(column.GetFilterOperators().Select(t => new { Value = column.GetFilterOperatorText(t), Key = t }))" TextProperty="Value" ValueProperty="Key" TValue="FilterOperator" Value="@column.GetSecondFilterOperator()" Change="@(args => column.SetSecondFilterOperator((FilterOperator)args))" />
                                                        @if (PropertyAccess.IsNumeric(column.FilterPropertyType))
                                                        {
                                                            @(DrawNumericFilter(column, false, false))
                                                        }
                                                        else if (PropertyAccess.IsDate(column.FilterPropertyType))
                                                        {
                                                            <RadzenDatePicker TValue="@object"
                                                                      ShowTime="true" ShowTimeOkButton="true" DateFormat="@getFilterDateFormat(column)"
                                                                      Value="@column.GetSecondFilterValue()" Change="@(args => column.SetFilterValue(args.Value, false))" />

                                                        }
                                                        else if (column.FilterPropertyType == typeof(bool) || column.FilterPropertyType == typeof(bool?))
                                                        {
                                                            <RadzenCheckBox TriState="true" TValue="@object" Value="@column.GetSecondFilterValue()" Change="@(args => column.SetFilterValue(args, false))"/>
                                                        }
                                                        else
                                                        {
                                                            <RadzenTextBox Value="@($"{column.GetSecondFilterValue()}")" Change="@(args => column.SetFilterValue(args, false))" />
                                                        }
                                                    }
                                                </div>
                                                @if (column.FilterTemplate == null)
                                                {
                                                    <div class="rz-grid-filter-buttons">
                                                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text=@ClearFilterText Click="@((args) => ClearFilter(column, true))" />
                                                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text=@ApplyFilterText Click="@((args) => ApplyFilter(column, true))" />
                                                    </div>
                                                }
                                            </div>
                                        
                                    }
                            </div>
                        </th>
                    }
                </tr>
                @if (AllowFiltering && FilterMode == FilterMode.Simple && columns.Where(column => column.Filterable && (!string.IsNullOrEmpty(column.GetFilterProperty()) || column.FilterTemplate != null)).Any())
                {
                    <tr>
                        @foreach(var g in groups)
                        {
                            <th class="rz-col-icon  rz-unselectable-text" scope="col">
                                <span class="rz-column-title"></span>
                            </th>
                        }
                        @if (Template != null && ShowExpandColumn)
                        {
                            <th class="rz-col-icon  rz-unselectable-text" scope="col">
                                <span class="rz-column-title"></span>
                            </th>
                        }
                        @foreach (var column in visibleColumns)
                        {
                            <th class="@($" rz-unselectable-text")" tabindex="1" scope="col" style="@column.GetStyle(true, true)">
                                @if (AllowFiltering && column.Filterable && (!string.IsNullOrEmpty(column.GetFilterProperty()) || column.FilterTemplate != null))
                                {
                                    <div class="rz-cell-filter">
                                        <div class="rz-cell-filter-content">
                                            @if (column.FilterTemplate != null)
                                            {
                                                @column.FilterTemplate(column)
                                            }
                                            else
                                            {
                                                <label class="rz-cell-filter-label" style="height:35px" onclick="event.preventDefault()">
                                                    @if (column.FilterPropertyType == typeof(DateTime) || column.FilterPropertyType == typeof(DateTime?) || column.FilterPropertyType == typeof(DateTimeOffset) || column.FilterPropertyType == typeof(DateTimeOffset?))
                                                    {
                                                        <i onclick="@($"Radzen.togglePopup(this.parentNode, '{PopupID}{column.GetFilterProperty()}')")"
                                                           class="rzi">date_range</i>
                                                        @if (column.GetFilterValue() != null)
                                                        {
                                                            <span class="rz-current-filter">@column.GetFilterValue()</span>
                                                            <i @onclick="@((args) => ClearFilter(column))" class="rzi rz-cell-filter-clear">close</i>
                                                        }
                                                        <div id="@($"{PopupID}{column.GetFilterProperty()}")" class="rz-overlaypanel"
                                                             style="display:none;width:550px;" tabindex="0">
                                                            <div class="rz-overlaypanel-content">

                                                                <div class="rz-date-filter">

                                                                    <div class="rz-listbox rz-inputtext   ">
                                                                        <div class="rz-listbox-list-wrapper">
                                                                            <ul class="rz-listbox-list">
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.Equals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.Equals))" style="display: block;">
                                                                                    <span>@EqualsText</span>
                                                                                </li>
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.NotEquals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.NotEquals))" style="display: block;">
                                                                                    <span>@NotEqualsText</span>
                                                                                </li>
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.LessThan))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.LessThan))" style="display: block;">
                                                                                    <span>@LessThanText</span>
                                                                                </li>
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.LessThanOrEquals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.LessThanOrEquals))" style="display: block;">
                                                                                    <span>@LessThanOrEqualsText</span>
                                                                                </li>
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.GreaterThan))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.GreaterThan))" style="display: block;">
                                                                                    <span>@GreaterThanText</span>
                                                                                </li>
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.GreaterThanOrEquals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.GreaterThanOrEquals))" style="display: block;">
                                                                                    <span>@GreaterThanOrEqualsText</span>
                                                                                </li>
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.IsNull))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.IsNull))" style="display: block;">
                                                                                    <span>@IsNullText</span>
                                                                                </li>
                                                                                <li class="@(DateFilterOperatorStyle(column, FilterOperator.IsNotNull))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.IsNotNull))" style="display: block;">
                                                                                    <span>@IsNotNullText</span>
                                                                                </li>
                                                                            </ul>
                                                                        </div>
                                                                    </div>

                                                                    <RadzenDatePicker TValue="@object"
                                                                                      ShowTime="true" ShowTimeOkButton="false" Inline="true" DateFormat="@getFilterDateFormat(column)"
                                                                                      Value="@column.GetFilterValue()" Change="@(args => column.SetFilterValue(args.Value))" />

                                                                </div>
                                                                <div class="rz-date-filter-buttons">
                                                                    <button class="rz-button rz-clear-filter" @onclick="@((args) => ClearFilter(column, true))">
                                                                        @ClearFilterText
                                                                    </button>
                                                                    <button class="rz-button rz-apply-filter" @onclick="@((args) => ApplyFilter(column, true))">
                                                                        @ApplyFilterText
                                                                    </button>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    }
                                                    else if (PropertyAccess.IsNumeric(column.FilterPropertyType))
                                                    {
                                                        <i class="rzi">search</i>
                                                        @(DrawNumericFilter(column))
                                                    }
                                                    else if (column.FilterPropertyType == typeof(bool) || column.FilterPropertyType == typeof(bool?))
                                                    {
                                                        <div style="@(column.TextAlign == TextAlign.Center ? "width:100%;text-align:center" : column.TextAlign == TextAlign.Right ? "width:100%;text-align:right" : "")">
                                                        <RadzenCheckBox TriState="true" TValue="@object" Value="@column.GetFilterValue()" Change="@((args) => OnFilter(new ChangeEventArgs() { Value = args }, column))" />
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <i class="rzi">search</i>
                                                        <input id="@(getFilterInputId(column))" @onchange="@((args) => OnFilter(args, column))" @onkeydown="@((args) => OnFilterKeyPress(args, column))" value="@column.GetFilterValue()" type="text" />
                                                    }
                                                </label>
                                            }
                                        </div>
                                    </div>
                                }
                            </th>
                        }
                    </tr>
                }
            </thead>
            <tbody>
                @if (Data != null)
                {
                    @if (Count > 0)
                    {
                        if (columns.Count > 0)
                        {
                            @DrawRows(visibleColumns)
                        }
                    }
                    else
                    {
                        <tr class=" rz-datatable-emptymessage-row">
                            <td class="rz-datatable-emptymessage" colspan="@(visibleColumns.Count + (Template != null && ShowExpandColumn ? 1 : 0))">
                                @if (EmptyTemplate != null)
                                {
                                    @EmptyTemplate
                                }
                                else
                                {
                                    <span>@EmptyText</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
            @if (visibleColumns.Where(c => c.FooterTemplate != null).Any())
            {
                <tfoot class="rz-datatable-tfoot">
                    <tr class="">
                        @foreach(var g in groups)
                        {
                            <td class="rz-col-icon rz-unselectable-text" scope="col">
                                <span class="rz-column-title"></span>
                            </td>
                        }
                        @if (Template != null && ShowExpandColumn)
                        {
                            <td class="rz-col-icon rz-unselectable-text" scope="col">
                                <span class="rz-column-title"></span>
                            </td>
                        }
                        @for (var j = 0; j < visibleColumns.Count; j++)
                        {
                            var column = visibleColumns[j];
                            var cellAttr = FooterCellAttributes(column);

                            object colspan;
                            cellAttr.TryGetValue("colspan", out colspan);

                            if (colspan != null)
                            {
                                j = j + (int)Convert.ChangeType(colspan, TypeCode.Int32) - 1;
                            }

                            <td class="@($" {column.FooterCssClass} {getFrozenColumnClass(column, visibleColumns)}")" style="@column.GetStyle(true, true)" @attributes="@(cellAttr)">
                                <span class="rz-column-footer">
                                    @if (column.FooterTemplate != null)
                                    {
                                        @column.FooterTemplate
                                    }
                                </span>
                            </td>
                        }
                    </tr>
                </tfoot>
            }
        </table>

        @if (IsLoading)
        {
            <div class="rz-datatable-loading"></div>
            <div class="rz-datatable-loading-content">
                <i class="rzi-circle-o-notch"></i>
            </div>
        }
    </div>

        @if (AllowPaging && (PagerPosition == PagerPosition.Bottom || PagerPosition == PagerPosition.TopAndBottom))
        {
            <RadzenPager @ref="bottomPager" Count="@Count" PageSize="@PageSize" PageNumbersCount="@PageNumbersCount" PageChanged="@OnPageChanged" PageSizeChanged="@OnPageSizeChanged" PageSizeOptions="@PageSizeOptions" ShowPagingSummary="@ShowPagingSummary" PagingSummaryFormat="@PagingSummaryFormat" />
        }
    </div>
}

