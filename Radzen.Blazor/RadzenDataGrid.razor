@using System.Linq.Dynamic.Core
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@typeparam TItem
@inherits PagedDataBoundComponent<TItem>

@if (Columns != null)
{
    <CascadingValue Value=this>
        @Columns
    </CascadingValue>
}

@if (Visible)
{
    var visibleColumns = columns.Where(c => c.Visible).ToList();

    <div @ref=@Element style="@Style" @attributes="Attributes" class="rz-data-grid @GetCssClass()" id="@GetId()">
        @if (AllowGrouping || AllowColumnPicking)
        {
            <div class="rz-group-header" @onmouseup=@(args => EndColumnDropToGroup())>
                @if (AllowGrouping)
                {
                    @if (groups.Any())
                    {
                        <div class="rz-group-header-items">
                            @foreach (var gd in groups)
                            {
                                <div class="rz-group-header-item">
                                    <span class="rz-group-header-item-title">@gd.GetTitle()</span>
                                    <a href="javascript:void(0)" @onclick=@(args => { groups.Remove(gd); _groupedPagedView = null; }) role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close">
                                        <span class="rzi rzi-times"></span>
                                    </a>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="rz-group-header-drop">@GroupPanelText</div>
                    }
                }

                @if (AllowColumnPicking)
                {
                    <div class="rz-column-picker">
                        <RadzenDropDown SelectAllText="All"
                                        MaxSelectedLabels="2" 
                                        SelectedItemsText="@ColumnsShowingText" Change=@(args => StateHasChanged())
                                        @bind-Value="@selectedColumns" 
                                        Multiple="true" 
                                        Placeholder="Columns" 
                                        Data="allPickableColumns" 
                                        TextProperty="Title" />
                    </div>
                }
            </div>
        }


        @if (AllowPaging && (PagerPosition == PagerPosition.Top || PagerPosition == PagerPosition.TopAndBottom))
        {
            <RadzenPager HorizontalAlign="@PagerHorizontalAlign" AlwaysVisible="@PagerAlwaysVisible" @ref="topPager" Count="@Count" PageSize="@PageSize" PageNumbersCount="@PageNumbersCount" PageChanged="@OnPageChanged" PageSizeChanged="@OnPageSizeChanged" PageSizeOptions="@PageSizeOptions" ShowPagingSummary="@ShowPagingSummary" PagingSummaryFormat="@PagingSummaryFormat" PageSizeText="@PageSizeText" />
        }

        <div class="rz-data-grid-data">
            <table class="table table-responsive-sm @(Count > 0 ? "table-hover" : "")">
                <colgroup style="border-top-style: hidden">
                    @foreach (var g in groups)
                    {
                        <col>
                    }
                    @if (Template != null && ShowExpandColumn)
                    {
                        <col>
                    }
                    @foreach (var column in visibleColumns)
                    {
                        <col id=@(getColumnResizerId(visibleColumns.IndexOf(column)) + "-col") style="@column.GetStyle()">
                    }
                </colgroup>
                <thead class="thead-light table-light">
                    @for (var i = 0; i < deepestChildColumnLevel + 1; i++)
                    {
                        <tr>
                            @foreach (var g in groups)
                            {
                                <th class="rz-col-icon rz-unselectable-text table-header" scope="col" rowspan=@(deepestChildColumnLevel + 1)>
                                    <span class="rz-column-title"></span>
                                </th>
                            }
                            @if (Template != null && ShowExpandColumn)
                            {
                                <th class="rz-col-icon rz-unselectable-text table-header" scope="col" rowspan=@(deepestChildColumnLevel + 1)>
                                    <span class="rz-column-title"></span>
                                </th>
                            }
                            @for (var j = 0; j < visibleColumns.Count; j++)
                            {
                                var column = visibleColumns[j];

                                var cellAttr = HeaderCellAttributes(column);

                                object colspan;
                                cellAttr.TryGetValue("colspan", out colspan);

                                if (colspan != null)
                                {
                                    j = j + (int)Convert.ChangeType(colspan, TypeCode.Int32) - 1;
                                }

                                var columnIndex = visibleColumns.IndexOf(column);
                                var sortableClass = AllowSorting && column.Sortable ? "rz-sortable-column" : "";

                                <RadzenDataGridHeaderCell RowIndex="@i" Grid="@this" Column="@column" ColumnIndex="@columnIndex" CssClass="@($"rz-unselectable-text table-header {sortableClass} {column.HeaderCssClass} {getFrozenColumnClass(column, visibleColumns)} {(column.Columns != null || column.Parent != null ? "rz-composite-cell" : "")}".Trim())" Attributes="@(cellAttr)" />
                            }
                        </tr>
                    }
                    @if (AllowFiltering && FilterMode == FilterMode.Simple && columns.Where(column => column.Filterable && (!string.IsNullOrEmpty(column.GetFilterProperty()) || column.FilterTemplate != null)).Any())
                    {
                        <tr>
                            @foreach (var g in groups)
                            {
                                <th class="rz-col-icon  rz-unselectable-text table-header" scope="col" rowspan=@(deepestChildColumnLevel + 1)>
                                    <span class="rz-column-title"></span>
                                </th>
                            }
                            @if (Template != null && ShowExpandColumn)
                            {
                                <th class="rz-col-icon  rz-unselectable-text table-header" scope="col" rowspan=@(deepestChildColumnLevel + 1)>
                                    <span class="rz-column-title"></span>
                                </th>
                            }
                            @foreach (var column in visibleColumns)
                            {
                                <th colspan="@column.GetColSpan()" class="@($" rz-unselectable-text table-header")" scope="col" style="@column.GetStyle(true, true)">
                                    @if (AllowFiltering && column.Filterable && column.Columns == null && (!string.IsNullOrEmpty(column.GetFilterProperty()) || column.FilterTemplate != null))
                                    {
                                        <div class="rz-cell-filter">
                                            <div class="rz-cell-filter-content">
                                                @if (column.FilterTemplate != null)
                                                {
                                                    @column.FilterTemplate(column)
                                                }
                                                else
                                                {
                                                    <label class="rz-cell-filter-label" style="height:35px" onclick="event.preventDefault()">
                                                        @if (column.FilterPropertyType == typeof(DateTime) || column.FilterPropertyType == typeof(DateTime?) || column.FilterPropertyType == typeof(DateTimeOffset) || column.FilterPropertyType == typeof(DateTimeOffset?))
                                                        {
                                                            <button class="rz-button rz-button-md rz-button-icon-only btn-light" onclick="@($"Radzen.togglePopup(this.parentNode, '{PopupID}{column.GetFilterProperty()}')")">
                                                                <i class="rzi">date_range</i>
                                                            </button>
                                                            var filterValue = column.GetFilterValue();
                                                            @if (filterValue != null)
                                                            {
                                                                <span class="rz-current-filter">@string.Format("{0:" + getFilterDateFormat(column) + "}", filterValue)</span>
                                                                <i @onclick="@((args) => ClearFilter(column))" class="rzi rz-cell-filter-clear">close</i>
                                                            }
                                                            <div id="@($"{PopupID}{column.GetFilterProperty()}")" class="rz-overlaypanel"
                                         style="display:none;width:550px;" tabindex="0">
                                                                <div class="rz-overlaypanel-content">

                                                                    <div class="rz-date-filter">

                                                                        <div class="rz-listbox rz-inputtext   ">
                                                                            <div class="rz-listbox-list-wrapper">
                                                                                <ul class="rz-listbox-list">
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.Equals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.Equals))" style="display: block;">
                                                                                        <span>@EqualsText</span>
                                                                                    </li>
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.NotEquals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.NotEquals))" style="display: block;">
                                                                                        <span>@NotEqualsText</span>
                                                                                    </li>
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.LessThan))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.LessThan))" style="display: block;">
                                                                                        <span>@LessThanText</span>
                                                                                    </li>
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.LessThanOrEquals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.LessThanOrEquals))" style="display: block;">
                                                                                        <span>@LessThanOrEqualsText</span>
                                                                                    </li>
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.GreaterThan))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.GreaterThan))" style="display: block;">
                                                                                        <span>@GreaterThanText</span>
                                                                                    </li>
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.GreaterThanOrEquals))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.GreaterThanOrEquals))" style="display: block;">
                                                                                        <span>@GreaterThanOrEqualsText</span>
                                                                                    </li>
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.IsNull))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.IsNull))" style="display: block;">
                                                                                        <span>@IsNullText</span>
                                                                                    </li>
                                                                                    <li class="@(DateFilterOperatorStyle(column, FilterOperator.IsNotNull))" @onclick="@((args) => ApplyDateFilterByFilterOperator(column, FilterOperator.IsNotNull))" style="display: block;">
                                                                                        <span>@IsNotNullText</span>
                                                                                    </li>
                                                                                </ul>
                                                                            </div>
                                                                        </div>

                                                                        <RadzenDatePicker TValue="@object"
                                                                  ShowTime="true" ShowTimeOkButton="false" Inline="true" DateFormat="@getFilterDateFormat(column)"
                                                                  Value="@column.GetFilterValue()" Change="@(args => column.SetFilterValue(args.Value))" />

                                                                    </div>
                                                                    <div class="rz-date-filter-buttons">
                                                                        <button class="rz-button rz-clear-filter" @onclick="@((args) => ClearFilter(column, true))">
                                                                            @ClearFilterText
                                                                        </button>
                                                                        <button class="rz-button rz-apply-filter" @onclick="@((args) => ApplyFilter(column, true))">
                                                                            @ApplyFilterText
                                                                        </button>
                                                                    </div>

                                                                </div>
                                                            </div>
                                                        }
                                                        else if (PropertyAccess.IsNumeric(column.FilterPropertyType))
                                                        {
                                                            @(DrawNumericFilter(column))
                                                        }
                                                        else if (column.FilterPropertyType == typeof(bool) || column.FilterPropertyType == typeof(bool?))
                                                        {
                                                            <div style="@(column.TextAlign == TextAlign.Center ? "width:100%;text-align:center" : column.TextAlign == TextAlign.Right ? "width:100%;text-align:right" : "")">
                                                                <RadzenCheckBox TriState="true" TValue="@object" Value="@column.GetFilterValue()" Change="@((args) => OnFilter(new ChangeEventArgs() { Value = args }, column))" />
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <input id="@(getFilterInputId(column))" @onchange="@((args) => OnFilter(args, column))" @onkeydown="@((args) => OnFilterKeyPress(args, column))" value="@column.GetFilterValue()" type="text" class="rz-textbox" style="width: 100%;" />
                                                        }
                                                    </label>
                                                }
                                            </div>
                                        </div>
                                    }
                                </th>
                            }
                        </tr>
                    }
                </thead>
                <tbody class="@CssBody">
                    @if (Data != null)
                    {
                        @if (Count > 0 || !AllowPaging && LoadData.HasDelegate && Count == 0)
                        {
                            if (columns.Count > 0)
                            {
                                @DrawRows(visibleColumns)
                            }
                        }
                        else
                        {
                            <tr class=" rz-datatable-emptymessage-row">
                                <td class="rz-datatable-emptymessage" colspan="@(visibleColumns.Count + (Template != null && ShowExpandColumn ? 1 : 0))">
                                    @if (EmptyTemplate != null)
                                    {
                                        @EmptyTemplate
                                    }
                                    else
                                    {
                                        <span style="white-space: normal">@EmptyText</span>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
                @if (visibleColumns.Where(c => c.FooterTemplate != null).Any())
                {
                    <tfoot class="rz-datatable-tfoot">
                        @for (var i = 0; i < deepestChildColumnLevel + 1; i++)
                        {
                            <tr class="">
                                @foreach (var g in groups)
                                {
                                    <td class="rz-col-icon rz-unselectable-text" scope="col" rowspan=@(deepestChildColumnLevel + 1)>
                                        <span class="rz-column-title"></span>
                                    </td>
                                }
                                @if (Template != null && ShowExpandColumn)
                                {
                                    <td class="rz-col-icon rz-unselectable-text" scope="col" rowspan=@(deepestChildColumnLevel + 1)>
                                        <span class="rz-column-title"></span>
                                    </td>
                                }
                                @for (var j = 0; j < visibleColumns.Count; j++)
                                {
                                    var column = visibleColumns[j];
                                    var cellAttr = FooterCellAttributes(column);

                                    object colspan;
                                    cellAttr.TryGetValue("colspan", out colspan);

                                    if (colspan != null)
                                    {
                                        j = j + (int)Convert.ChangeType(colspan, TypeCode.Int32) - 1;
                                    }

                                    <RadzenDataGridFooterCell RowIndex="@i" Grid="@this" Column="@column"
                                              CssClass="@($"{column.FooterCssClass} {getFrozenColumnClass(column, visibleColumns)} {(column.Columns != null || column.Parent != null ? "rz-composite-cell" : "")}".Trim())"
                                              Attributes="@(cellAttr)" />
                                }
                            </tr>
                        }
                    </tfoot>
                }
            </table>

            @if (IsLoading)
            {
                <div class="rz-datatable-loading"></div>
                <div class="rz-datatable-loading-content">
                    <i class="rzi-circle-o-notch"></i>
                </div>
            }
        </div>

        @if (AllowPaging && (PagerPosition == PagerPosition.Bottom || PagerPosition == PagerPosition.TopAndBottom))
        {
            <RadzenPager HorizontalAlign="@PagerHorizontalAlign" AlwaysVisible="@PagerAlwaysVisible" @ref="bottomPager" Count="@Count" PageSize="@PageSize" PageNumbersCount="@PageNumbersCount" PageChanged="@OnPageChanged" PageSizeChanged="@OnPageSizeChanged" PageSizeOptions="@PageSizeOptions" ShowPagingSummary="@ShowPagingSummary" PagingSummaryFormat="@PagingSummaryFormat" PageSizeText="@PageSizeText" />
        }
    </div>
}

